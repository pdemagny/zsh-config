g    git
ga    git add
gaa    git add --all
gapa    git add --patch
gau    git add --update
gav    git add --verbose
gap    git apply
gb    git branch
gba    git branch -a
gbd    git branch -d
gbda    git branch --no-color --merged | command grep -vE "^(*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d
gbD    git branch -D
gbl    git blame -b -w
gbnm    git branch --no-merged
gbr    git branch --remote
gbs    git bisect
gbsb    git bisect bad
gbsg    git bisect good
gbsr    git bisect reset
gbss    git bisect start
gc    git commit -v
gc!    git commit -v --amend
gcn!    git commit -v --no-edit --amend
gca    git commit -v -a
gca!    git commit -v -a --amend
gcan!    git commit -v -a --no-edit --amend
gcans!    git commit -v -a -s --no-edit --amend
gcam    git commit -a -m
gcsm    git commit -s -m
gcb    git checkout -b
gcf    git config --list
gcl    git clone --recurse-submodules
gclean    git clean -id
gpristine    git reset --hard && git clean -dfx
gcm    git checkout master
gcd    git checkout develop
gcmsg    git commit -m
gco    git checkout
gcount    git shortlog -sn
gcp    git cherry-pick
gcpa    git cherry-pick --abort
gcpc    git cherry-pick --continue
gcs    git commit -S
gd    git diff
gdca    git diff --cached
gdcw    git diff --cached --word-diff
gdct    git describe --tags $(git rev-list --tags --max-count=1)
gds    git diff --staged
gdv    git diff -w $@ | view -
gdw    git diff --word-diff
gf    git fetch
gfa    git fetch --all --prune
gfg    git ls-files | grep
gfo    git fetch origin
gg    git gui citool
gga    git gui citool --amend
ggf    git push --force origin $(current_branch)
ggfl    git push --force-with-lease origin $(current_branch)
ggl    git pull origin $(current_branch)
ggp    git push origin $(current_branch)
ggpnp    ggl && ggp
ggsup    git branch --set-upstream-to=origin/$(git_current_branch)
ggu    git pull --rebase origin $(current_branch)
gpsup    git push --set-upstream origin $(git_current_branch)
ghh    git help
gignore    git update-index --assume-unchanged
gignored    git ls-files -v | grep "^[[:lower:]]"
gl    git pull
glgp    git log --stat -p
glgga    git log --graph --decorate --all
glgm    git log --graph --max-count=10
glo    git log --oneline --decorate
glol    git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
glols    git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --stat
glod    git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'
glods    git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short
glola    git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --all
glog    git log --oneline --decorate --graph
gloga    git log --oneline --decorate --graph --all
glp    _git_log_prettily
gm    git merge
gmom    git merge origin/master
gmt    git mergetool --no-prompt
gmtvim    git mergetool --no-prompt --tool=vimdiff
gmum    git merge upstream/master
gma    git merge --abort
gp    git push
gpd    git push --dry-run
gpf    git push --force-with-lease
gpf!    git push --force
gpoat    git push origin --all && git push origin --tags
gpu    git push upstream
gpv    git push -v
gr    git remote
gra    git remote add
grb    git rebase
grba    git rebase --abort
grbc    git rebase --continue
grbd    git rebase develop
grbi    git rebase -i
grbm    git rebase master
grbs    git rebase --skip
grh    git reset
grhh    git reset --hard
groh    git reset origin/$(git_current_branch) --hard
grm    git rm
grmc    git rm --cached
grmv    git remote rename
grrm    git remote remove
grset    git remote set-url
grt    cd "$(git rev-parse --show-toplevel || echo .)"
gru    git reset --
grup    git remote update
grv    git remote -v
gsb    git status -sb
gsd    git svn dcommit
gsh    git show
gsi    git submodule init
gsps    git show --pretty=short --show-signature
gsr    git svn rebase
gss    git status -s
gst    git status
gsta    git stash push
gsta    git stash save
gstaa    git stash apply
gstc    git stash clear
gstd    git stash drop
gstl    git stash list
gstp    git stash pop
gsts    git stash show --text
gstall    git stash --all
gsu    git submodule update
gts    git tag -s
gtv    git tag | sort -V
gtl    gtl(){ git tag --sort=-v:refname -n -l ${1}* }; noglob gtl
gunignore    git update-index --no-assume-unchanged
gunwip    git log -n 1 | grep -q -c "--wip--" && git reset HEAD~1
gup    git pull --rebase
gupv    git pull --rebase -v
gupa    git pull --rebase --autostash
gupav    git pull --rebase --autostash -v
glum    git pull upstream master
gwch    git whatchanged -p --abbrev-commit --pretty=medium
gwip    git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"

age	apt-get	Command line tool for handling packages
api	aptitude	Same functionality as apt-get, provides extra options while installation
acs	apt-cache search	Command line tool for searching apt software package cache
aps	aptitude search	Searches installed packages using aptitude
as	aptitude -F "* %p -> %d \n(%v/%V)" \ -no-gui --disable-columns search	-
afs	apt-file search --regexp	Search file in packages
asrc	apt-get source	Fetch source packages through apt-get
app	apt-cache policy	Displays priority of package sources
aac	sudo $apt_pref autoclean	Clears out the local repository of retrieved package files
abd	sudo $apt_pref build-dep	Installs all dependencies for building packages
ac	sudo $apt_pref clean	Clears out the local repository of retrieved package files except lock files
ad	sudo $apt_pref update	Updates the package lists for upgrades for packages
adg	sudo $apt_pref update && sudo $apt_pref $apt_upgr	Update and upgrade packages
adu	sudo $apt_pref update && sudo $apt_pref dist-upgrade	Smart upgrade that handles dependencies
afu	sudo apt-file update	Update the files in packages
au	sudo $apt_pref $apt_upgr	-
ai	sudo $apt_pref install	Command-line tool to install package
ail	sed -e 's/ */ /g' -e 's/ *//' | cut -s -d ' ' -f 1 | "' xargs sudo $apt_pref install	Install all packages given on the command line while using only the first word of each line
ap	sudo $apt_pref purge	Removes packages along with configuration files
ar	sudo $apt_pref remove	Removes packages, keeps the configuration files
ads	sudo apt-get dselect-upgrade	Installs packages from list and removes all not in the list
dia	sudo dpkg -i ./*.deb	Install all .deb files in the current directory
di	sudo dpkg -i	Install all .deb files in the current directory
kclean	sudo aptitude remove -P ?and(inlinux-(ima|hea) ?not(~nuname -r))	Remove ALL kernel images and headers EXCEPT the one in use
aac	su -ls '$apt_pref autoclean' root
ac	su -ls '$apt_pref clean' root
ad	su -lc '$apt_pref update' root
adg	su -lc '$apt_pref update && aptitude $apt_upgr' root
adu	su -lc '$apt_pref update && aptitude dist-upgrade' root
afu	su -lc "apt-file update
ag	su -lc '$apt_pref $apt_upgr' root
dia	su -lc "dpkg -i ./*.deb" root
allpkgs	aptitude search -F "%p" --disable-columns ~i	Display all installed packages
mydeb	time dpkg-buildpackage -rfakeroot -us -uc	Create a basic .deb package
apt-copy	Create a simple script that can be used to 'duplicate' a system
apt-history	Displays apt history for a command
kerndeb	Builds kernel packages
apt-list-packages	List packages by size